/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.wavemaker.sampleapps.wavekart.eshopping.models.query.*;

@Service
public class EshoppingQueryExecutorServiceImpl implements EshoppingQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EshoppingQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("eshoppingWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "eshoppingTransactionManager", readOnly = true)
    @Override
    public Page<TotalItemsPriceCartProdResponse> executeTotalItemsPrice_CartProd(Integer cartId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("cartId", cartId);

        return queryExecutor.executeNamedQuery("TotalItemsPrice_CartProd", params, TotalItemsPriceCartProdResponse.class, pageable);
    }

    @Transactional(value = "eshoppingTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTotalItemsPrice_CartProd(Integer cartId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("cartId", cartId);

        QueryProcedureInput queryInput = new QueryProcedureInput("TotalItemsPrice_CartProd", params, TotalItemsPriceCartProdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "eshoppingTransactionManager", readOnly = true)
    @Override
    public Page<TotalItemsPriceOrdersResponse> executeTotalItemsPrice_Orders(Integer oid, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("Oid", oid);

        return queryExecutor.executeNamedQuery("TotalItemsPrice_Orders", params, TotalItemsPriceOrdersResponse.class, pageable);
    }

    @Transactional(value = "eshoppingTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTotalItemsPrice_Orders(Integer oid, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("Oid", oid);

        QueryProcedureInput queryInput = new QueryProcedureInput("TotalItemsPrice_Orders", params, TotalItemsPriceOrdersResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public Integer executeDeleteCartItems_LoggedUser(Integer loggedUserCartId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("LoggedUserCartId", loggedUserCartId);

        return queryExecutor.executeNamedQueryForUpdate("DeleteCartItems_LoggedUser", params);
    }

    @Transactional(value = "eshoppingTransactionManager", readOnly = true)
    @Override
    public Page<GetCartIdByUseridResponse> executeGet_CartIdByUserid(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("Get_CartIdByUserid", params, GetCartIdByUseridResponse.class, pageable);
    }

    @Transactional(value = "eshoppingTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGet_CartIdByUserid(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("Get_CartIdByUserid", params, GetCartIdByUseridResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "eshoppingTransactionManager", readOnly = true)
    @Override
    public Page<MyCartItemsCountResponse> executeMyCart_Items_Count(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("MyCart_Items_Count", params, MyCartItemsCountResponse.class, pageable);
    }

    @Transactional(value = "eshoppingTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportMyCart_Items_Count(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("MyCart_Items_Count", params, MyCartItemsCountResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "eshoppingTransactionManager", readOnly = true)
    @Override
    public Page<QvGetInventoryDetailsResponse> executeQV_getInventoryDetails(List<Integer> productIds, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("productIds", productIds);

        return queryExecutor.executeNamedQuery("QV_getInventoryDetails", params, QvGetInventoryDetailsResponse.class, pageable);
    }

    @Transactional(value = "eshoppingTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQV_getInventoryDetails(List<Integer> productIds, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("productIds", productIds);

        QueryProcedureInput queryInput = new QueryProcedureInput("QV_getInventoryDetails", params, QvGetInventoryDetailsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "eshoppingTransactionManager", readOnly = true)
    @Override
    public Page<GetCartItemsIdResponse> executeGet_CartItems_id(Integer cid, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("Cid", cid);

        return queryExecutor.executeNamedQuery("Get_CartItems_id", params, GetCartItemsIdResponse.class, pageable);
    }

    @Transactional(value = "eshoppingTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGet_CartItems_id(Integer cid, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("Cid", cid);

        QueryProcedureInput queryInput = new QueryProcedureInput("Get_CartItems_id", params, GetCartItemsIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public Integer executeQV_UpdateQuantityFromPI(QvUpdateQuantityFromPiRequest qvUpdateQuantityFromPiRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("qty", qvUpdateQuantityFromPiRequest.getQty());
        params.put("productId", qvUpdateQuantityFromPiRequest.getProductId());

        return queryExecutor.executeNamedQueryForUpdate("QV_UpdateQuantityFromPI", params);
    }

}