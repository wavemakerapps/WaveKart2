/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.wavekart.eshopping.CartItems;
import com.wavemaker.sampleapps.wavekart.eshopping.OrderLineItems;
import com.wavemaker.sampleapps.wavekart.eshopping.ProductDetails;

/**
 * Service object for domain model class {@link ProductDetails}.
 */
public interface ProductDetailsService {

    /**
     * Creates a new ProductDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ProductDetails if any.
     *
     * @param productDetails Details of the ProductDetails to be created; value cannot be null.
     * @return The newly created ProductDetails.
     */
    ProductDetails create(@Valid ProductDetails productDetails);


	/**
     * Returns ProductDetails by given id if exists.
     *
     * @param productdetailsId The id of the ProductDetails to get; value cannot be null.
     * @return ProductDetails associated with the given productdetailsId.
	 * @throws EntityNotFoundException If no ProductDetails is found.
     */
    ProductDetails getById(Integer productdetailsId);

    /**
     * Find and return the ProductDetails by given id if exists, returns null otherwise.
     *
     * @param productdetailsId The id of the ProductDetails to get; value cannot be null.
     * @return ProductDetails associated with the given productdetailsId.
     */
    ProductDetails findById(Integer productdetailsId);

	/**
     * Find and return the list of ProductDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param productdetailsIds The id's of the ProductDetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ProductDetails associated with the given productdetailsIds.
     */
    List<ProductDetails> findByMultipleIds(List<Integer> productdetailsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ProductDetails. It replaces all fields of the existing ProductDetails with the given productDetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ProductDetails if any.
     *
     * @param productDetails The details of the ProductDetails to be updated; value cannot be null.
     * @return The updated ProductDetails.
     * @throws EntityNotFoundException if no ProductDetails is found with given input.
     */
    ProductDetails update(@Valid ProductDetails productDetails);

    /**
     * Deletes an existing ProductDetails with the given id.
     *
     * @param productdetailsId The id of the ProductDetails to be deleted; value cannot be null.
     * @return The deleted ProductDetails.
     * @throws EntityNotFoundException if no ProductDetails found with the given id.
     */
    ProductDetails delete(Integer productdetailsId);

    /**
     * Deletes an existing ProductDetails with the given object.
     *
     * @param productDetails The instance of the ProductDetails to be deleted; value cannot be null.
     */
    void delete(ProductDetails productDetails);

    /**
     * Find all ProductDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ProductDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ProductDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ProductDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ProductDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<ProductDetails> findAll(String query, Pageable pageable);

    /**
     * Exports all ProductDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ProductDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ProductDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ProductDetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated cartItemses for given ProductDetails id.
     *
     * @param productId value of productId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CartItems instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CartItems> findAssociatedCartItemses(Integer productId, Pageable pageable);

    /*
     * Returns the associated orderLineItemses for given ProductDetails id.
     *
     * @param productId value of productId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated OrderLineItems instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<OrderLineItems> findAssociatedOrderLineItemses(Integer productId, Pageable pageable);

}