/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.wavekart.eshopping.OrderLineItems;
import com.wavemaker.sampleapps.wavekart.eshopping.OrderLineItemsId;


/**
 * ServiceImpl object for domain model class OrderLineItems.
 *
 * @see OrderLineItems
 */
@Service("eshopping.OrderLineItemsService")
@Validated
public class OrderLineItemsServiceImpl implements OrderLineItemsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderLineItemsServiceImpl.class);


    @Autowired
    @Qualifier("eshopping.OrderLineItemsDao")
    private WMGenericDao<OrderLineItems, OrderLineItemsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OrderLineItems, OrderLineItemsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public OrderLineItems create(OrderLineItems orderLineItems) {
        LOGGER.debug("Creating a new OrderLineItems with information: {}", orderLineItems);

        OrderLineItems orderLineItemsCreated = this.wmGenericDao.create(orderLineItems);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(orderLineItemsCreated);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public OrderLineItems getById(OrderLineItemsId orderlineitemsId) {
        LOGGER.debug("Finding OrderLineItems by id: {}", orderlineitemsId);
        return this.wmGenericDao.findById(orderlineitemsId);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public OrderLineItems findById(OrderLineItemsId orderlineitemsId) {
        LOGGER.debug("Finding OrderLineItems by id: {}", orderlineitemsId);
        try {
            return this.wmGenericDao.findById(orderlineitemsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OrderLineItems found with id: {}", orderlineitemsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public List<OrderLineItems> findByMultipleIds(List<OrderLineItemsId> orderlineitemsIds, boolean orderedReturn) {
        LOGGER.debug("Finding OrderLineItems by ids: {}", orderlineitemsIds);

        return this.wmGenericDao.findByMultipleIds(orderlineitemsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "eshoppingTransactionManager")
    @Override
    public OrderLineItems update(OrderLineItems orderLineItems) {
        LOGGER.debug("Updating OrderLineItems with information: {}", orderLineItems);

        this.wmGenericDao.update(orderLineItems);
        this.wmGenericDao.refresh(orderLineItems);

        return orderLineItems;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public OrderLineItems delete(OrderLineItemsId orderlineitemsId) {
        LOGGER.debug("Deleting OrderLineItems with id: {}", orderlineitemsId);
        OrderLineItems deleted = this.wmGenericDao.findById(orderlineitemsId);
        if (deleted == null) {
            LOGGER.debug("No OrderLineItems found with id: {}", orderlineitemsId);
            throw new EntityNotFoundException(String.valueOf(orderlineitemsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public void delete(OrderLineItems orderLineItems) {
        LOGGER.debug("Deleting OrderLineItems with {}", orderLineItems);
        this.wmGenericDao.delete(orderLineItems);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<OrderLineItems> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OrderLineItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<OrderLineItems> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OrderLineItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service eshopping for table OrderLineItems to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service eshopping for table OrderLineItems to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}