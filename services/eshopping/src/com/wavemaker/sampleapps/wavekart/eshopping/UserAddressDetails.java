/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * UserAddressDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`USER_ADDRESS_DETAILS`")
public class UserAddressDetails implements Serializable {

    private Integer userAddresssId;
    private int userId;
    private String address;
    private String city;
    private String state;
    private String country;
    private int pincode;
    private UserDetails userDetails;
    private List<Orders> orderses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`USER_ADDRESSS_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getUserAddresssId() {
        return this.userAddresssId;
    }

    public void setUserAddresssId(Integer userAddresssId) {
        this.userAddresssId = userAddresssId;
    }

    @Column(name = "`USER_ID`", nullable = false, scale = 0, precision = 10)
    public int getUserId() {
        return this.userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    @Column(name = "`ADDRESS`", nullable = false, length = 255)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "`CITY`", nullable = false, length = 255)
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "`STATE`", nullable = false, length = 255)
    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    @Column(name = "`COUNTRY`", nullable = false, length = 255)
    public String getCountry() {
        return this.country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    @Column(name = "`PINCODE`", nullable = false, scale = 0, precision = 10)
    public int getPincode() {
        return this.pincode;
    }

    public void setPincode(int pincode) {
        this.pincode = pincode;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`USER_ID`", referencedColumnName = "`USER_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`SYS_FK_10138`"))
    @Fetch(FetchMode.JOIN)
    public UserDetails getUserDetails() {
        return this.userDetails;
    }

    public void setUserDetails(UserDetails userDetails) {
        if(userDetails != null) {
            this.userId = userDetails.getUserId();
        }

        this.userDetails = userDetails;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userAddressDetails")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Orders> getOrderses() {
        return this.orderses;
    }

    public void setOrderses(List<Orders> orderses) {
        this.orderses = orderses;
    }

    @PostPersist
    public void onPostPersist() {
        if(orderses != null) {
            orderses.forEach(_orders -> _orders.setUserAddressDetails(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UserAddressDetails)) return false;
        final UserAddressDetails userAddressDetails = (UserAddressDetails) o;
        return Objects.equals(getUserAddresssId(), userAddressDetails.getUserAddresssId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUserAddresssId());
    }
}