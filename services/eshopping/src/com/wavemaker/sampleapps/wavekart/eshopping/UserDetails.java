/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PostPersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * UserDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`USER_DETAILS`", uniqueConstraints = {
            @UniqueConstraint(name = "`SYS_IDX_SYS_CT_10112_10120`", columnNames = {"`EMAIL_ADDRESS`"})})
public class UserDetails implements Serializable {

    private Integer userId;
    private String userName;
    private String password;
    private String phoneNumber;
    private String emailAddress;
    private String role;
    private List<Orders> orderses;
    private CartDetails cartDetails;
    private List<UserAddressDetails> userAddressDetailses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`USER_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "`USER_NAME`", nullable = false, length = 255)
    public String getUserName() {
        return this.userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Column(name = "`PASSWORD`", nullable = false, length = 255)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "`PHONE_NUMBER`", nullable = false, length = 50)
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Column(name = "`EMAIL_ADDRESS`", nullable = false, length = 255)
    public String getEmailAddress() {
        return this.emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    @Column(name = "`ROLE`", nullable = false, length = 25)
    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userDetails")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Orders> getOrderses() {
        return this.orderses;
    }

    public void setOrderses(List<Orders> orderses) {
        this.orderses = orderses;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "userDetails")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public CartDetails getCartDetails() {
        return this.cartDetails;
    }

    public void setCartDetails(CartDetails cartDetails) {
        this.cartDetails = cartDetails;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userDetails")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<UserAddressDetails> getUserAddressDetailses() {
        return this.userAddressDetailses;
    }

    public void setUserAddressDetailses(List<UserAddressDetails> userAddressDetailses) {
        this.userAddressDetailses = userAddressDetailses;
    }

    @PostPersist
    public void onPostPersist() {
        if(orderses != null) {
            orderses.forEach(_orders -> _orders.setUserDetails(this));
        }
        if(cartDetails != null) {
            cartDetails.setUserDetails(this);
        }
        if(userAddressDetailses != null) {
            userAddressDetailses.forEach(_userAddressDetails -> _userAddressDetails.setUserDetails(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UserDetails)) return false;
        final UserDetails userDetails = (UserDetails) o;
        return Objects.equals(getUserId(), userDetails.getUserId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUserId());
    }
}