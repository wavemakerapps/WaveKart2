/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.wavekart.eshopping.Orders;
import com.wavemaker.sampleapps.wavekart.eshopping.UserAddressDetails;

/**
 * Service object for domain model class {@link UserAddressDetails}.
 */
public interface UserAddressDetailsService {

    /**
     * Creates a new UserAddressDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserAddressDetails if any.
     *
     * @param userAddressDetails Details of the UserAddressDetails to be created; value cannot be null.
     * @return The newly created UserAddressDetails.
     */
    UserAddressDetails create(@Valid UserAddressDetails userAddressDetails);


	/**
     * Returns UserAddressDetails by given id if exists.
     *
     * @param useraddressdetailsId The id of the UserAddressDetails to get; value cannot be null.
     * @return UserAddressDetails associated with the given useraddressdetailsId.
	 * @throws EntityNotFoundException If no UserAddressDetails is found.
     */
    UserAddressDetails getById(Integer useraddressdetailsId);

    /**
     * Find and return the UserAddressDetails by given id if exists, returns null otherwise.
     *
     * @param useraddressdetailsId The id of the UserAddressDetails to get; value cannot be null.
     * @return UserAddressDetails associated with the given useraddressdetailsId.
     */
    UserAddressDetails findById(Integer useraddressdetailsId);

	/**
     * Find and return the list of UserAddressDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param useraddressdetailsIds The id's of the UserAddressDetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserAddressDetails associated with the given useraddressdetailsIds.
     */
    List<UserAddressDetails> findByMultipleIds(List<Integer> useraddressdetailsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserAddressDetails. It replaces all fields of the existing UserAddressDetails with the given userAddressDetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserAddressDetails if any.
     *
     * @param userAddressDetails The details of the UserAddressDetails to be updated; value cannot be null.
     * @return The updated UserAddressDetails.
     * @throws EntityNotFoundException if no UserAddressDetails is found with given input.
     */
    UserAddressDetails update(@Valid UserAddressDetails userAddressDetails);

    /**
     * Deletes an existing UserAddressDetails with the given id.
     *
     * @param useraddressdetailsId The id of the UserAddressDetails to be deleted; value cannot be null.
     * @return The deleted UserAddressDetails.
     * @throws EntityNotFoundException if no UserAddressDetails found with the given id.
     */
    UserAddressDetails delete(Integer useraddressdetailsId);

    /**
     * Deletes an existing UserAddressDetails with the given object.
     *
     * @param userAddressDetails The instance of the UserAddressDetails to be deleted; value cannot be null.
     */
    void delete(UserAddressDetails userAddressDetails);

    /**
     * Find all UserAddressDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserAddressDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserAddressDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserAddressDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserAddressDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserAddressDetails> findAll(String query, Pageable pageable);

    /**
     * Exports all UserAddressDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserAddressDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserAddressDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserAddressDetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated orderses for given UserAddressDetails id.
     *
     * @param userAddresssId value of userAddresssId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Orders instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Orders> findAssociatedOrderses(Integer userAddresssId, Pageable pageable);

}