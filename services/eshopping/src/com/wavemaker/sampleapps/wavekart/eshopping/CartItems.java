/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * CartItems generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`CART_ITEMS`")
@IdClass(CartItemsId.class)
public class CartItems implements Serializable {

    private Integer productId;
    private Integer cartId;
    private Integer productQuantity;
    private BigDecimal currentPrice;
    private BigDecimal totalPrice;
    private CartDetails cartDetails;
    private ProductDetails productDetails;

    @Id
    @Column(name = "`PRODUCT_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getProductId() {
        return this.productId;
    }

    public void setProductId(Integer productId) {
        this.productId = productId;
    }

    @Id
    @Column(name = "`CART_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getCartId() {
        return this.cartId;
    }

    public void setCartId(Integer cartId) {
        this.cartId = cartId;
    }

    @Column(name = "`PRODUCT_QUANTITY`", nullable = true, scale = 0, precision = 10)
    public Integer getProductQuantity() {
        return this.productQuantity;
    }

    public void setProductQuantity(Integer productQuantity) {
        this.productQuantity = productQuantity;
    }

    @Column(name = "`CURRENT_PRICE`", nullable = false, scale = 9, precision = 64)
    public BigDecimal getCurrentPrice() {
        return this.currentPrice;
    }

    public void setCurrentPrice(BigDecimal currentPrice) {
        this.currentPrice = currentPrice;
    }

    @Column(name = "`TOTAL_PRICE`", nullable = true, scale = 9, precision = 64)
    public BigDecimal getTotalPrice() {
        return this.totalPrice;
    }

    public void setTotalPrice(BigDecimal totalPrice) {
        this.totalPrice = totalPrice;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CART_ID`", referencedColumnName = "`CART_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`SYS_FK_10165`"))
    @Fetch(FetchMode.JOIN)
    public CartDetails getCartDetails() {
        return this.cartDetails;
    }

    public void setCartDetails(CartDetails cartDetails) {
        if(cartDetails != null) {
            this.cartId = cartDetails.getCartId();
        }

        this.cartDetails = cartDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PRODUCT_ID`", referencedColumnName = "`PRODUCT_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`SYS_FK_10164`"))
    @Fetch(FetchMode.JOIN)
    public ProductDetails getProductDetails() {
        return this.productDetails;
    }

    public void setProductDetails(ProductDetails productDetails) {
        if(productDetails != null) {
            this.productId = productDetails.getProductId();
        }

        this.productDetails = productDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CartItems)) return false;
        final CartItems cartItems = (CartItems) o;
        return Objects.equals(getProductId(), cartItems.getProductId()) &&
                Objects.equals(getCartId(), cartItems.getCartId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getProductId(),
                getCartId());
    }
}