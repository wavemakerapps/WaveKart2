/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.sampleapps.wavekart.eshopping.CartDetails;
import com.wavemaker.sampleapps.wavekart.eshopping.CartItems;
import com.wavemaker.sampleapps.wavekart.eshopping.service.CartDetailsService;


/**
 * Controller object for domain model class CartDetails.
 * @see CartDetails
 */
@RestController("eshopping.CartDetailsController")
@Api(value = "CartDetailsController", description = "Exposes APIs to work with CartDetails resource.")
@RequestMapping("/eshopping/CartDetails")
public class CartDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CartDetailsController.class);

    @Autowired
	@Qualifier("eshopping.CartDetailsService")
	private CartDetailsService cartDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CartDetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CartDetails createCartDetails(@RequestBody CartDetails cartDetails) {
		LOGGER.debug("Create CartDetails with information: {}" , cartDetails);

		cartDetails = cartDetailsService.create(cartDetails);
		LOGGER.debug("Created CartDetails with information: {}" , cartDetails);

	    return cartDetails;
	}

    @ApiOperation(value = "Returns the CartDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CartDetails getCartDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CartDetails with id: {}" , id);

        CartDetails foundCartDetails = cartDetailsService.getById(id);
        LOGGER.debug("CartDetails details with id: {}" , foundCartDetails);

        return foundCartDetails;
    }

    @ApiOperation(value = "Updates the CartDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CartDetails editCartDetails(@PathVariable("id") Integer id, @RequestBody CartDetails cartDetails) {
        LOGGER.debug("Editing CartDetails with id: {}" , cartDetails.getCartId());

        cartDetails.setCartId(id);
        cartDetails = cartDetailsService.update(cartDetails);
        LOGGER.debug("CartDetails details with id: {}" , cartDetails);

        return cartDetails;
    }

    @ApiOperation(value = "Deletes the CartDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCartDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CartDetails with id: {}" , id);

        CartDetails deletedCartDetails = cartDetailsService.delete(id);

        return deletedCartDetails != null;
    }

    @RequestMapping(value = "/userId/{userId}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching CartDetails with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CartDetails getByUserId(@PathVariable("userId") int userId) {
        LOGGER.debug("Getting CartDetails with uniques key UserId");
        return cartDetailsService.getByUserId(userId);
    }

    /**
     * @deprecated Use {@link #findCartDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CartDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CartDetails> searchCartDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CartDetails list by query filter:{}", (Object) queryFilters);
        return cartDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CartDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CartDetails> findCartDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CartDetails list by filter:", query);
        return cartDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CartDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CartDetails> filterCartDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CartDetails list by filter", query);
        return cartDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCartDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cartDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCartDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CartDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> cartDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CartDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCartDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CartDetails");
		return cartDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCartDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cartDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/cartItemses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the cartItemses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CartItems> findAssociatedCartItemses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated cartItemses");
        return cartDetailsService.findAssociatedCartItemses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CartDetailsService instance
	 */
	protected void setCartDetailsService(CartDetailsService service) {
		this.cartDetailsService = service;
	}

}