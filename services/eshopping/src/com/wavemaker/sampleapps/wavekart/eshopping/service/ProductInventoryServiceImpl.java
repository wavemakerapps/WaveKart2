/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.wavekart.eshopping.ProductInventory;


/**
 * ServiceImpl object for domain model class ProductInventory.
 *
 * @see ProductInventory
 */
@Service("eshopping.ProductInventoryService")
@Validated
public class ProductInventoryServiceImpl implements ProductInventoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductInventoryServiceImpl.class);


    @Autowired
    @Qualifier("eshopping.ProductInventoryDao")
    private WMGenericDao<ProductInventory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProductInventory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public ProductInventory create(ProductInventory productInventory) {
        LOGGER.debug("Creating a new ProductInventory with information: {}", productInventory);

        ProductInventory productInventoryCreated = this.wmGenericDao.create(productInventory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(productInventoryCreated);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public ProductInventory getById(Integer productinventoryId) {
        LOGGER.debug("Finding ProductInventory by id: {}", productinventoryId);
        return this.wmGenericDao.findById(productinventoryId);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public ProductInventory findById(Integer productinventoryId) {
        LOGGER.debug("Finding ProductInventory by id: {}", productinventoryId);
        try {
            return this.wmGenericDao.findById(productinventoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ProductInventory found with id: {}", productinventoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public List<ProductInventory> findByMultipleIds(List<Integer> productinventoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding ProductInventories by ids: {}", productinventoryIds);

        return this.wmGenericDao.findByMultipleIds(productinventoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "eshoppingTransactionManager")
    @Override
    public ProductInventory update(ProductInventory productInventory) {
        LOGGER.debug("Updating ProductInventory with information: {}", productInventory);

        this.wmGenericDao.update(productInventory);
        this.wmGenericDao.refresh(productInventory);

        return productInventory;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public ProductInventory delete(Integer productinventoryId) {
        LOGGER.debug("Deleting ProductInventory with id: {}", productinventoryId);
        ProductInventory deleted = this.wmGenericDao.findById(productinventoryId);
        if (deleted == null) {
            LOGGER.debug("No ProductInventory found with id: {}", productinventoryId);
            throw new EntityNotFoundException(String.valueOf(productinventoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public void delete(ProductInventory productInventory) {
        LOGGER.debug("Deleting ProductInventory with {}", productInventory);
        this.wmGenericDao.delete(productInventory);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<ProductInventory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProductInventories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<ProductInventory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProductInventories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service eshopping for table ProductInventory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service eshopping for table ProductInventory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}