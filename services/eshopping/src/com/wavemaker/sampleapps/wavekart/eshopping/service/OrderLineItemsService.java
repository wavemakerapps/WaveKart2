/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.wavekart.eshopping.OrderLineItems;
import com.wavemaker.sampleapps.wavekart.eshopping.OrderLineItemsId;

/**
 * Service object for domain model class {@link OrderLineItems}.
 */
public interface OrderLineItemsService {

    /**
     * Creates a new OrderLineItems. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OrderLineItems if any.
     *
     * @param orderLineItems Details of the OrderLineItems to be created; value cannot be null.
     * @return The newly created OrderLineItems.
     */
    OrderLineItems create(@Valid OrderLineItems orderLineItems);


	/**
     * Returns OrderLineItems by given id if exists.
     *
     * @param orderlineitemsId The id of the OrderLineItems to get; value cannot be null.
     * @return OrderLineItems associated with the given orderlineitemsId.
	 * @throws EntityNotFoundException If no OrderLineItems is found.
     */
    OrderLineItems getById(OrderLineItemsId orderlineitemsId);

    /**
     * Find and return the OrderLineItems by given id if exists, returns null otherwise.
     *
     * @param orderlineitemsId The id of the OrderLineItems to get; value cannot be null.
     * @return OrderLineItems associated with the given orderlineitemsId.
     */
    OrderLineItems findById(OrderLineItemsId orderlineitemsId);

	/**
     * Find and return the list of OrderLineItems by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param orderlineitemsIds The id's of the OrderLineItems to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OrderLineItems associated with the given orderlineitemsIds.
     */
    List<OrderLineItems> findByMultipleIds(List<OrderLineItemsId> orderlineitemsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing OrderLineItems. It replaces all fields of the existing OrderLineItems with the given orderLineItems.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OrderLineItems if any.
     *
     * @param orderLineItems The details of the OrderLineItems to be updated; value cannot be null.
     * @return The updated OrderLineItems.
     * @throws EntityNotFoundException if no OrderLineItems is found with given input.
     */
    OrderLineItems update(@Valid OrderLineItems orderLineItems);

    /**
     * Deletes an existing OrderLineItems with the given id.
     *
     * @param orderlineitemsId The id of the OrderLineItems to be deleted; value cannot be null.
     * @return The deleted OrderLineItems.
     * @throws EntityNotFoundException if no OrderLineItems found with the given id.
     */
    OrderLineItems delete(OrderLineItemsId orderlineitemsId);

    /**
     * Deletes an existing OrderLineItems with the given object.
     *
     * @param orderLineItems The instance of the OrderLineItems to be deleted; value cannot be null.
     */
    void delete(OrderLineItems orderLineItems);

    /**
     * Find all OrderLineItems matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OrderLineItems.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OrderLineItems> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OrderLineItems matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OrderLineItems.
     *
     * @see Pageable
     * @see Page
     */
    Page<OrderLineItems> findAll(String query, Pageable pageable);

    /**
     * Exports all OrderLineItems matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OrderLineItems matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OrderLineItems in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OrderLineItems.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}