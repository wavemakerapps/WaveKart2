/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.wavekart.eshopping.Orders;
import com.wavemaker.sampleapps.wavekart.eshopping.UserAddressDetails;


/**
 * ServiceImpl object for domain model class UserAddressDetails.
 *
 * @see UserAddressDetails
 */
@Service("eshopping.UserAddressDetailsService")
@Validated
public class UserAddressDetailsServiceImpl implements UserAddressDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserAddressDetailsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("eshopping.OrdersService")
    private OrdersService ordersService;

    @Autowired
    @Qualifier("eshopping.UserAddressDetailsDao")
    private WMGenericDao<UserAddressDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserAddressDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public UserAddressDetails create(UserAddressDetails userAddressDetails) {
        LOGGER.debug("Creating a new UserAddressDetails with information: {}", userAddressDetails);

        UserAddressDetails userAddressDetailsCreated = this.wmGenericDao.create(userAddressDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userAddressDetailsCreated);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public UserAddressDetails getById(Integer useraddressdetailsId) {
        LOGGER.debug("Finding UserAddressDetails by id: {}", useraddressdetailsId);
        return this.wmGenericDao.findById(useraddressdetailsId);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public UserAddressDetails findById(Integer useraddressdetailsId) {
        LOGGER.debug("Finding UserAddressDetails by id: {}", useraddressdetailsId);
        try {
            return this.wmGenericDao.findById(useraddressdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserAddressDetails found with id: {}", useraddressdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public List<UserAddressDetails> findByMultipleIds(List<Integer> useraddressdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserAddressDetails by ids: {}", useraddressdetailsIds);

        return this.wmGenericDao.findByMultipleIds(useraddressdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "eshoppingTransactionManager")
    @Override
    public UserAddressDetails update(UserAddressDetails userAddressDetails) {
        LOGGER.debug("Updating UserAddressDetails with information: {}", userAddressDetails);

        List<Orders> orderses = userAddressDetails.getOrderses();
        if(orderses != null && Hibernate.isInitialized(orderses)) {
            orderses.forEach(_orders -> _orders.setUserAddressDetails(userAddressDetails));
        }

        this.wmGenericDao.update(userAddressDetails);
        this.wmGenericDao.refresh(userAddressDetails);

        return userAddressDetails;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public UserAddressDetails delete(Integer useraddressdetailsId) {
        LOGGER.debug("Deleting UserAddressDetails with id: {}", useraddressdetailsId);
        UserAddressDetails deleted = this.wmGenericDao.findById(useraddressdetailsId);
        if (deleted == null) {
            LOGGER.debug("No UserAddressDetails found with id: {}", useraddressdetailsId);
            throw new EntityNotFoundException(String.valueOf(useraddressdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "eshoppingTransactionManager")
    @Override
    public void delete(UserAddressDetails userAddressDetails) {
        LOGGER.debug("Deleting UserAddressDetails with {}", userAddressDetails);
        this.wmGenericDao.delete(userAddressDetails);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<UserAddressDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserAddressDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<UserAddressDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserAddressDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service eshopping for table UserAddressDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service eshopping for table UserAddressDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "eshoppingTransactionManager")
    @Override
    public Page<Orders> findAssociatedOrderses(Integer userAddresssId, Pageable pageable) {
        LOGGER.debug("Fetching all associated orderses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userAddressDetails.userAddresssId = '" + userAddresssId + "'");

        return ordersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service OrdersService instance
     */
    protected void setOrdersService(OrdersService service) {
        this.ordersService = service;
    }

}